##9.5
pairs(data)
data<-Auto
library(ISLR2)
data<-Auto
dim(data)
data<-na.omit(data)
##9.5
pairs(data)
.1:.5
(1:9)/10
##9.4
quantile(data,.4)
data<-Auto
##9.4
quantile(data,.4)
##9.4
quantile(data$mpg,.4)
data
data<-Auto
library(ISLR2)
data<-Auto
dim(data)
View(data)
data2<-Boston
View(data2)
View(data2)
crime<-as.factor(data2$crim)
crime
data2<-Boston
dim(data)
data<-Auto
View(data)
View(data)
data
line<-lm(mpg~horsepower+displacement+weight,data=data)
line
# Q10
library(ISLR2)
data2<-Boston
# Q10
library(ISLR2)
data2<-Boston
## 10.6
summary(data2$ptratio)
data2$ptratio
## 10.8
data2$rm>7
## 10.8
sum(data2$rm>7)
sum(data2$rm>8)
View(data2)
View(data2)
plot(data2$crim,data2$zn)
## set personal access token:
credentials::set_github_pat("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")
data2$crim
plot(data2$crim,data2$zn)
sum(data2$rm>8)
data2$zn
data2$crim
plot_x <- seq(-1, 6, 0.05)
plot_y <- (plot_x-2.5) ^ 2 - 1
par(lwd = 3)
plot(plot_x, plot_y, lty = 1, type = 'l', col = 'blue')
plot(plot_x, plot_y, lty = 1, type = 'l', col = 'blue')
dY <- function(theta){
return(2*(theta - 2.5))
}
Y <- function(theta){
return((theta - 2.5)^2 - 1)
}
eta <- 0.1
epsilon <- 1e-8
theta <- 0.0
theta_history <-  vector()
i = 1
while(TRUE){
theta_history[i] = theta
gradient = dJ(theta)
last_theta = theta
theta = theta - eta * gradient
i <- i+1
if (abs(J(theta) - J(last_theta)) < epsilon){
break
}
}
plot(plot_x, J(plot_x), lty = 1, type = 'l', col = 'blue', lwd = 3)
lines(theta_history, J(theta_history), type = 'o', col = 'red', pch = 16, lty = 1, lwd = 2)
## 10.3
plot(data2$dis,data2$crim)
## 10.3
plot(data2$dis,data2$crim, main="distance and crime rate")
plot(data2$medv,data2$crim, main="house price and crime rate")
## 10.5
data2$chas
sum(data2$chas)
## 10.6
## 10.7
data2$medv
min(data2$medv)
lowest=index(min(data2$medv),data2$medv)
lowest=find(min(data2$medv),data2$medv)
lowest=find(min(data2$medv),data2$medv)
lowest=which(min(data2$medv),data2$medv)
lowest=which(min(data2$medv)=data2$medv)
lowest=which(min(data2$medv)==data2$medv)
lowest
## the census tracts index 399 and 406 have lowest medv
data2[399]
## the census tracts index 399 and 406 have lowest medv
data2[399,]
## the census tracts index 399 and 406 have lowest medv
data2[c(399,406)]
## the census tracts index 399 and 406 have lowest medv
data2[c(399,406),]
## the census tracts index 399 and 406 have lowest medv
lowest=data2[c(399,406),]
lowest
for(i in 1:12){
cat(names(lowest)[i])
}
cat(lowest[1,i],data2[,i])
cat(quantile(lowest[1,i],data2[,i]))
cat(rank(lowest[1,i]),length(data2[,i])))
cat(rank(lowest[1,i])/length(data2[,i]))
rank(lowest[1,i])
for(i in 1:12){
cat(names(lowest)[i],"\t")
cat(rank(lowest[1,i])/length(data2[,i]))
cat(rank(lowest[2,i])/length(data2[,i]))
}
for(i in 1:12){
cat(names(lowest)[i],"\n")
cat(rank(lowest[1,i])/length(data2[,i]),"\n")
cat(rank(lowest[2,i])/length(data2[,i]),"\n")
}
rank(lowest[2,i])
ecdf(data2[,i])(lowest[1,i])
max(data2$crim)
sort(data2$crim)
lowest[1,i]
lowest[1,1]
length(data2[,i])
lowest
quantile_inverse<-function(x,data){
sorted<-sort(data)
index<-which(data==sort)
return index/length(data)
}
quantile_inverse<-function(x,data){
sorted<-sort(data)
index<-which(data==sort)
return (index/length(data))
}
for(i in 1:12){
cat(names(lowest)[i],"\n")
cat(quantile_inverse(lowest[1,i],data2[,i]),"\n")
cat(rank(lowest[2,i])/length(data2[,i]),"\n")
ecdf
}
quantile_inverse<-function(x,data){
sorted<-sort(data)
index<-which(data==sorted)
return (index/length(data))
}
for(i in 1:12){
cat(names(lowest)[i],"\n")
cat(quantile_inverse(lowest[1,i],data2[,i]),"\n")
cat(rank(lowest[2,i])/length(data2[,i]),"\n")
ecdf
}
for(i in 1:12){
cat(names(lowest)[i],"\n")
cat(quantile_inverse(lowest[1,i],data2[,i]),"\n")
#cat(rank(lowest[2,i])/length(data2[,i]),"\n")
ecdf
}
cat(quantile_inverse(lowest[1,i],data2[,i]),"\n")
cat(quantile_inverse(lowest[1,1],data2[,1]),"\n")
for(i in 1:12){
cat(names(lowest)[i],"\n")
cat(quantile_inverse(lowest[1,i],data2[,i]),"\n")
#cat(rank(lowest[2,i])/length(data2[,i]),"\n")
ecdf
}
for(i in 1:12){
cat(names(lowest)[i],"\n")
#cat(quantile_inverse(lowest[1,i],data2[,i]),"\n")
#cat(rank(lowest[2,i])/length(data2[,i]),"\n")
ecdf
}
cat(quantile_inverse(lowest[1,i],data2[,i]),"\n")
for(i in 1:12){
cat(names(lowest)[i],"\n")
cat(quantile_inverse(lowest[1,i],data2[,i]),"\n")
#cat(rank(lowest[2,i])/length(data2[,i]),"\n")
ecdf
}
for(i in 1:12){
cat(names(lowest)[i],"\n")
cat(quantile_inverse(lowest[1,i],data2[,i]),"\n")
#cat(rank(lowest[2,i])/length(data2[,i]),"\n")
}
for(i in 1:12){
cat(names(lowest)[i],"\n")
cat(quantile_inverse(lowest[1,i],data2[,i]),"\n")
#cat(rank(lowest[2,i])/length(data2[,i]),"\n")
}
for(i in 1:12){
cat(names(lowest)[i],"\n")
cat(quantile_inverse(lowest[1,i],data2[,i]),"\n")
cat(quantile_inverse(lowest[2,i],data2[,i]),"\n")
#cat(rank(lowest[2,i])/length(data2[,i]),"\n")
}
quantile_inverse<-function(x,data){
sorted<-sort(data)
index<-which(data==sorted)
return (index/length(data))
}
sort(data)
quantile_inverse<-function(x,data){
#sorted<-sort(data)
index<-which(data==sort(data))
return (index/length(data))
}
quantile_inverse<-function(x,data){
#sorted<-sort(data)
index<-which(data==(sort(data)))
return (index/length(data))
}
for(i in 1:12){
cat(names(lowest)[i],"\n")
cat(quantile_inverse(lowest[1,i],data2[,i]),"\n")
cat(quantile_inverse(lowest[2,i],data2[,i]),"\n")
#cat(rank(lowest[2,i])/length(data2[,i]),"\n")
}
quantile_inverse<-function(x,data){
sorted<-sort(data)
index<-which(x==sorted)
return (index/length(data))
}
for(i in 1:12){
cat(names(lowest)[i],"\n")
cat(quantile_inverse(lowest[1,i],data2[,i]),"\n")
cat(quantile_inverse(lowest[2,i],data2[,i]),"\n")
#cat(rank(lowest[2,i])/length(data2[,i]),"\n")
}
quantile_inverse<-function(x,data){
sorted<-sort(data)
index<-which(x==sorted)
#return (index/length(data))
}
for(i in 1:12){
cat(names(lowest)[i],"\n")
cat(quantile_inverse(lowest[1,i],data2[,i]),"\n")
cat(quantile_inverse(lowest[2,i],data2[,i]),"\n")
#cat(rank(lowest[2,i])/length(data2[,i]),"\n")
}
lowest[1,i]
data2[,i]
for(i in 1:1){
cat(names(lowest)[i],"\n")
cat(quantile_inverse(lowest[1,i],data2[,i]),"\n")
cat(quantile_inverse(lowest[2,i],data2[,i]),"\n")
#cat(rank(lowest[2,i])/length(data2[,i]),"\n")
}
quantile_inverse<-function(x,data){
sorted<-sort(data)
index<-which(x==sorted)
return (index/length(data))
}
for(i in 1:12){
cat(names(lowest)[i],"\n")
cat(quantile_inverse(lowest[1,i],data2[,i]),"\n")
cat(quantile_inverse(lowest[2,i],data2[,i]),"\n")
#cat(rank(lowest[2,i])/length(data2[,i]),"\n")
}
lowest[2,i]
lowest[2,2]
lowest[2,i]
lowest
index/length(data)
# Q10
library(ISLR2)
data2<-Boston
## 10.6
## 10.7
data2$medv
## 10.6
## 10.7
min(data2$medv)
lowest=which(min(data2$medv)==data2$medv)
## the census tracts index 399 and 406 have lowest medv
lowest=data2[c(399,406),]
data=data2[,2]
sorted<-sort(data)
sorted
index<-which(x==sorted)
x=0
index<-which(x==sorted)
return (index/length(data))
index/length(data)
data
data
length(data)
quantile_inverse<-function(x,data){
sorted<-sort(data)
index<-which(x==sorted)
return (index/(length(data)))
}
for(i in 1:12){
cat(names(lowest)[i],"\n")
cat(quantile_inverse(lowest[1,i],data2[,i]),"\n")
cat(quantile_inverse(lowest[2,i],data2[,i]),"\n")
#cat(rank(lowest[2,i])/length(data2[,i]),"\n")
}
(length(data)
)
index/(length(data)
)
len=length(data)
len
return (index/len)
index/len
index
(x==sorted)
index
## the census tracts index 399 and 406 have lowest medv
lowest=data2[c(399,406),]
'''quantile_inverse<-function(x,data){
sorted<-sort(data)
index<-which(x==sorted)
len=length(data)
return (index/len)
}for(i in 1:12){
cat(names(lowest)[i],"\n")
cat(quantile_inverse(lowest[1,i],data2[,i]),"\n")
cat(quantile_inverse(lowest[2,i],data2[,i]),"\n")
#cat(rank(lowest[2,i])/length(data2[,i]),"\n")
}
'''
## the census tracts index 399 and 406 have lowest medv
lowest=data2[c(399,406),]
'''quantile_inverse<-function(x,data){
sorted<-sort(data)
index<-which(x==sorted)
len=length(data)
return (index/len)
}
for(i in 1:12){
cat(names(lowest)[i],"\n")
cat(quantile_inverse(lowest[1,i],data2[,i]),"\n")
cat(quantile_inverse(lowest[2,i],data2[,i]),"\n")
#cat(rank(lowest[2,i])/length(data2[,i]),"\n")
}
'''
#   len=length(data)
#   return (index/len)
# }
# for(i in 1:12){
#   cat(names(lowest)[i],"\n")
#   cat(quantile_inverse(lowest[1,i],data2[,i]),"\n")
#   cat(quantile_inverse(lowest[2,i],data2[,i]),"\n")
#   #cat(rank(lowest[2,i])/length(data2[,i]),"\n")
#
# }
lowest
summary(data2)
summary(data2)
#   len=length(data)
#   return (index/len)
# }
# for(i in 1:12){
#   cat(names(lowest)[i],"\n")
#   cat(quantile_inverse(lowest[1,i],data2[,i]),"\n")
#   cat(quantile_inverse(lowest[2,i],data2[,i]),"\n")
#   #cat(rank(lowest[2,i])/length(data2[,i]),"\n")
#
# }
lowest
summary(data2)
#   len=length(data)
#   return (index/len)
# }
# for(i in 1:12){
#   cat(names(lowest)[i],"\n")
#   cat(quantile_inverse(lowest[1,i],data2[,i]),"\n")
#   cat(quantile_inverse(lowest[2,i],data2[,i]),"\n")
#   #cat(rank(lowest[2,i])/length(data2[,i]),"\n")
#
# }
lowest
summary(data2)
#   len=length(data)
#   return (index/len)
# }
# for(i in 1:12){
#   cat(names(lowest)[i],"\n")
#   cat(quantile_inverse(lowest[1,i],data2[,i]),"\n")
#   cat(quantile_inverse(lowest[2,i],data2[,i]),"\n")
#   #cat(rank(lowest[2,i])/length(data2[,i]),"\n")
#
# }
lowest
summary(data2)
## 10.4
boxplot(data2$crim)
## 10.4
boxplot(data2$crim)
## 10.4
boxplot(data2$crim,data2$tax,data2$ptratio)
data2$tax
## 10.4
boxplot(data2$crim)
boxplot(data2$tax)
boxplot(data2$ptratio)
## 10.4
boxplot(data2$crim,main="Crime rate")
boxplot(data2$tax,main="Tax")
boxplot(data2$ptratio,,main="Pupil-teacher ratio")
boxplot(data2$ptratio,main="Pupil-teacher ratio")
## 10.6
summary(data2$ptratio)
## 10.8
room7=data2$rm>=7
room7=data2[room7,]
room7
## 10.8
room7=data2[data2$rm>=7,]
room7
## 10.8
room7=data2[data2$rm>=7,]
room8=data2[data2$rm>=8,]
room8
summary(room7)
summary(room7)
summary(room7)
summary(room8)
summary(data2)
summary(room7)
summary(room8)
summary(data2)
summary(room7)
summary(room8)
