a=seq(from=1,to=4,by=1)*(seq(from=1,to=4,by=1)-1)/2
a=seq(from=1,to=100,by=1)*(seq(from=1,to=100,by=1)-1)/2
print(a)
seq(from=1,to=100,by=1)*(seq(from=1,to=100,by=1)-1)/2
seq(from=1,to=100,by=1)
seq(from=1,to=100,by=1)*(seq(from=1,to=100,by=1)+1)/2
a<-seq(from=1,to=100,by=1)*(seq(from=1,to=100,by=1)+1)/2
print(a)
(seq(from=1,to=100,by=1)+1)/2
a=1:10
c=a*b
a<-seq(from=1,to=100,by=1)*(seq(from=1,to=100,by=1)+1)/2
k=0:10
sum(2^k/factorial(k))
contour(x=-2:2, y=-2:2, z=z)
z <- outer(X = -2:2, Y = -2:2)
contour(x=-2:2, y=-2:2, z=z)
filled.contour(x = -2:2, y = -2:2, z = z)
persp(x = -2:2, y = -2:2, z = z, col = "springgreen", theta = 45, phi = 0)
# theta: angles defining the viewing direction
# theta: angles defining the viewing direction
# phi: the azimuthal direction
z <- outer(X = -2:2, Y = -2:2)
contour(x=-2:2, y=-2:2, z=z)
library(mvtnorm)
n <- 100
install.packages("mvtnorm")
library(mvtnorm)
n <- 100
x.points <- seq(from =-3, to = 3, length.out = n)
y.points <- x.points
z <- matrix(data = 0, nrow=n, ncol=n)
mu <- c(0, 0)
rho <- 0.9
sigma <- matrix(data = c(1, rho, rho, 1), nrow=2)
for (i in 1:n) {
for (j in 1:n) {
z[i, j] <- dmvnorm(x = c(x.points[i], y.points[j]),
mean = mu, sigma = sigma)
}
}
contour(x = x.points, y = y.points, z = z)
filled.contour(x = x.points, y = y.points, z = z)
persp(x = x.points, y = y.points, z = z,
col = "blue", theta = 10, phi = 0)
library(mvtnorm)
n <- 100
x.points <- seq(from =-3, to = 3, length.out = n)
y.points <- x.points
z <- matrix(data = 0, nrow=n, ncol=n)
mu <- c(0, 0)
rho <- 0
sigma <- matrix(data = c(1, rho, rho, 1), nrow=2)
for (i in 1:n) {
for (j in 1:n) {
z[i, j] <- dmvnorm(x = c(x.points[i], y.points[j]),
mean = mu, sigma = sigma)
}
}
contour(x = x.points, y = y.points, z = z)
filled.contour(x = x.points, y = y.points, z = z)
persp(x = x.points, y = y.points, z = z,
col = "blue", theta = 10, phi = 0)
contour(x = x.points, y = y.points, z = z)
mu <- c(0, 0)
rho <- -0.9
sigma <- matrix(data = c(1, rho, rho, 1), nrow=2)
for (i in 1:n) {
for (j in 1:n) {
z[i, j] <- dmvnorm(x = c(x.points[i], y.points[j]),
mean = mu, sigma = sigma)
}
}
contour(x = x.points, y = y.points, z = z)
filled.contour(x = x.points, y = y.points, z = z)
# gives the number of lines of margin to be specified on the four sides of the plot.
x <- 1:10
y <- 1:10
plot(x = x, y = y, type = "n", main = "Defult")
par(mar=c(5, 4, 4, 2)+0.1)
plot(x = x, y = y, type = "n", main ="Updated"
plot(x = x, y = y, type = "n", main = "Defult")
# gives the number of lines of margin to be specified on the four sides of the plot.
x <- 1:10
y <- 1:10
plot(x = x, y = y, type = "n", main = "Defult")
par(mar=c(5, 4, 4, 2)+0.1)
plot(x = x, y = y, type = "n", main ="Updated"
plot(x = x, y = y, type = "n", main = "Defult")
# gives the number of lines of margin to be specified on the four sides of the plot.
x <- 1:10
y <- 1:10
# gives the number of lines of margin to be specified on the four sides of the plot.
x <- 1:10
y <- 1:10
plot(x = x, y = y, type = "n", main = "Defult")
par(mar=c(5, 4, 4, 2)+0.1)
plot(x = x, y = y, type = "n", main ="Updated")
# gives the number of lines of margin to be specified on the four sides of the plot.
x <- 1:10
y <- 1:10
plot(x = x, y = y, type = "n", main = "Defult")
par(mar=c(5, 4, 4, 2)+0.1)
par(mar=c(5, 4, 4, 2)+0.1)
plot(x = x, y = y, type = "n", main ="Updated")
par(mar=c(5, 4, 4, 2)+0.1)
plot(x = x, y = y, type = "n", main ="Updated")
plot(x = x, y = y, type = "n", main = "Defult")
par(mar=c(5, 4, 4, 2)+0.1)
plot(x = x, y = y, type = "n", main ="Updated")
# gives the number of lines of margin to be specified on the four sides of the plot.
x <- 1:10
y <- 1:10
plot(x = x, y = y, type = "n", main = "Defult")
par(mar=c(5, 4, 4, 2)+0.1)
plot(x = x, y = y, type = "n", main ="Updated")
par(mar=c(5, 4, 4, 2))
plot(x = x, y = y, type = "n", main = "Defult")
par(mar=c(5, 4, 4, 2)+0.1)
plot(x = x, y = y, type = "n", main ="Updated")
set.seed(123)
x <- rnorm(10)
x <- x[order(x)]
y <- 1 + 2*x + rnorm(10)
plot(x, y, type = "n", axes = FALSE, xlab = "", ylab = "")
points(x, y)
lines(x, y, lty= 1) # "blank", "solid", "dashed", "dotted","dotdash", "longdash" and "twodash"
abline(a = 1, b = 2)
axis(1,at=seq(-3,3,0.5))
axis(2,at=seq(-3,10,2))
title(main = "Put the title here", sub = "Sub-title")
points(-1, 1, col = "blue")
text(x = -1, y = 1, labels = "add the text here", pos = 1)
mtext(text = "text", side = 4) # add the text in the margin
legend("topleft", legend = c("legned 1","legned 2"),
lty = c(1,2), col = c(1,2), bty = "n")
axis(1,at=seq(-3,3,0.5))
plot(x, y, type = "n", axes = FALSE, xlab = "", ylab = "")
points(x, y)
lines(x, y, lty= 1) # "blank", "solid", "dashed", "dotted","dotdash", "longdash" and "twodash"
abline(a = 1, b = 2)
axis(1,at=seq(-3,3,0.5))
axis(2,at=seq(-3,10,2))
title(main = "Put the title here", sub = "Sub-title")
points(-1, 1, col = "blue")
text(x = -1, y = 1, labels = "add the text here", pos = 1)
plot(x, y, type = "n", axes = FALSE, xlab = "", ylab = "")
points(x, y)
lines(x, y, lty= 1) # "blank", "solid", "dashed", "dotted","dotdash", "longdash" and "twodash"
abline(a = 1, b = 2)
axis(1,at=seq(-3,3,0.5))
axis(1,at=seq(-3,3,1))
plot(x, y, type = "n", axes = FALSE, xlab = "", ylab = "")
points(x, y)
lines(x, y, lty= 1) # "blank", "solid", "dashed", "dotted","dotdash", "longdash" and "twodash"
abline(a = 1, b = 2)
axis(1,at=seq(-6,6,1))
axis(2,at=seq(-3,10,2))
plot(x, y, type = "n", axes = FALSE, xlab = "", ylab = "")
points(x, y)
lines(x, y, lty= 1) # "blank", "solid", "dashed", "dotted","dotdash", "longdash" and "twodash"
abline(a = 1, b = 2)
axis(1,at=seq(-6,6,1))
axis(2,at=seq(-3,10,2))
x <- 1:10
y <- 1:10
plot(x = x, y = y, type = "n", main="Polygon Drawing")
polygon(x = c(2,2,4), y = c(2,4,4), col = "blue", border = "red", lwd=4, lty = 3 )
plot(x = x, y = y, type = "n", main="Rectangle")
rect( 6, 6, 8, 8 )
set.seed(123)
x <- rnorm(10)
x <- x[order(x)]
y <- 1 + 2*x + rnorm(10)
plot(x, y, type = "n", axes = FALSE, xlab = "", ylab = "")
points(x, y)
plot(x, y, type = "n", axes = FALSE, xlab = "", ylab = "")
points(x, y,pch=16)
points(x, y,pch=16,col=‘red‘)
points(x, y,pch=16,col="red")
points(x, y,pch=0,col="red")
rect( 6, 6, 8, 8 ,col="red")
x <- 1:10
y <- 1:10
plot(x = x, y = y, type = "n", main="Polygon Drawing")
polygon(x = c(2,2,4), y = c(2,4,4), col = "blue", border = "red", lwd=4, lty = 3 )
plot(x = x, y = y, type = "n", main="Rectangle")
rect( 6, 6, 8, 8 ,col="red")
plot(pressure)
new_y<-pressure^(20/3)
new_y<-pressure^(20/3)
new_y<-pressure^(20/3)
plot(new_y)
curve( (0.168+0.007*x)^(20/3),
from = 0, to = 400, add = TRUE)
plot(new_y)
curve( (0.168+0.007*x)^(20/3),
from = 0, to = 400, add = TRUE)
curve( (0.168+0.007*x)^(20/3),
from = 0, to = 400, add = TRUE)
curve( (0.168+0.007*x)^(20/3),
from = 0, to = 4000000, add = TRUE)
curve( (0.168+0.007*x)^(20/3),
from = 0, to = 4000000, add = TRUE)
plot(new_y)
new_y<-pressure^(3/20)
plot(new_y)
20
new_y<-pressure^(20/3)
plot(new_y)
curve( (0.168+0.007*x)^(20/3),
from = 0, to = 4000000, add = TRUE)
new_y<-pressure^(20/3)
plot(new_y)
plot(new_y)
plot(pressure)
new_y<-pressure^(20/3)
plot(new_y)
curve( (0.168+0.007*x)^(20/3),
from = 0, to = 4000000, add = TRUE)
plot(new_y)
curve( (0.168+0.007*x)^(20/3),
from = 0, to = 400, add = TRUE)
i
B <- 1000
m <- 20
i <- 0.06 # initial guess
for (j in 1:B) i <- ( 1-(1+i)^{-m} )/ 19
i
for (j in 1:B) i <- (4*^3+15)/14
for (j in 1:B) i <- (4*i^3+15)/14
i
i <- 1 # initial guess
for (j in 1:B) i <- (4*i^3+15)/14
i
i <- 0 # initial guess
for (j in 1:B) i <- (4*i^3+15)/14
i
i <- numeric(300) # initial guess
for (j in 2:300){
i[j] <- (4*i[j-1]^3+15)/14
}
i
i[1]=-100
for (j in 2:300){
i[j] <- (4*i[j-1]^3+15)/14
}
i <- numeric(300) # initial guess
i[1]=-100
for (j in 2:300){
i[j] <- (4*i[j-1]^3+15)/14
}
i[1]=-1
for (j in 2:300){
i[j] <- (4*i[j-1]^3+15)/14
}
x0 <- 0.1
x <- x0
x0 <- 0.1
x <- x0
myf <- x^4+7(x+1)^2+x+3
myf <- x^4+7(x+1)^2+x+3
myf <- function(x) x^4+7(x+1)^2+x+3
num.iter <- 0
tolerance <- 0.000001
while ( abs(myf) > tolerance){
myf_prime <- 4*x^3+14*x+15
x <- x - myf/myf_prime
myf <- x^4+7(x+1)^2+x+3
num.iter <- num.iter + 1
}
x0 <- 0.1
x <- x0
myf <- function(x) x^4+7(x+1)^2+x+3
num.iter <- 0
tolerance <- 0.000001
while ( abs(myf) > tolerance){
myf_prime <-function(x) 4*x^3+14*x+15
x <- x - myf/myf_prime
myf <-function(x) x^4+7(x+1)^2+x+3
num.iter <- num.iter + 1
}
x
x0 <- 0.1
x <- x0
myf <- x^3 + 2*x^2 -7
num.iter <- 0
tolerance <- 0.000001
while ( abs(myf) > tolerance){
myf_prime <- 3*x^2 + 4*x
x <- x - myf/myf_prime
myf <- x^3 + 2*x^2 -7
num.iter <- num.iter + 1
}
x
x0 <- 0.1
x <- x0
myf <- function(x) x^4+7(x+1)^2+x+3
num.iter <- 0
tolerance <- 0.000001
while ( abs(myf) > tolerance){
myf_prime <-function(x) 4*x^3+14*x+15
x <- x - myf/myf_prime
myf <-function(x) x^4+7(x+1)^2+x+3
num.iter <- num.iter + 1
}
x
myf_prime <-function(x) 4*x^3+14*x+15
x <- x - myf/myf_prime
myf <-function(x) x^4+7(x+1)^2+x+3
num.iter <- num.iter + 1
while ( abs(myf) > tolerance){
myf_prime <-function(x) 4*x^3+14*x+15
x <- x - myf/myf_prime
myf <-function(x) x^4+7(x+1)^2+x+3
num.iter <- num.iter + 1
}
x
myf <-x^4+7(x+1)^2+x+3
x0 <- 0.1
x <- x0
myf <- function(x) x^4+7(x+1)^2+x+3
num.iter <- 0
x0 <- 0.1
x <- x0
myf <- function(x) x^4+7(x+1)^2+x+3
num.iter <- 0
tolerance <- 0.000001
myf_prime <-function(x) 4*x^3+14*x+15
x <- x - myf/myf_prime
myf_prime <- 4*x^3+14*x+15
x <- x - myf/myf_prime
a=1:10
a(a+1)/2
a*(a+1)/2
plot(a)
a=1:10
a*(a+1)/2
plot(a)
plot(a)
a=1:100
a*(a+1)/2
plot(a)
a=seq(1,10,by=0.01)
a*(a+1)/2
plot(a)
plot(a,col="RED")
plot(a,col="RED",type='n')
plot(a,col="RED",type='n')
matrix(c(1,1,0,1,0,1,0,1,1),ncol = 3,nrow = 3)
qr(x)
result$
A=  matrix(c(1,2,3,2,4,5,3,5,6),ncol=3)
result$
A=matrix(c(1,2,3,2,4,5,3,5,6),ncol=3)
result$
A=matrix(c(1,2,3,2,4,5,3,5,6),ncol=3)
result$
matrix(c(1,2,3,2,4,5,3,5,6),ncol=3)
matrix(c(1,2,3,2,4,5,3,5,6),ncol=3)
a=matrix(c(1,2,3,2,4,5,3,5,6),ncol=3)
eigen(a)
b=matrix(c(3,0,0,0,3,0,0,0,3),ncol=3)
eigen(a)
eigen(b)
a=matrix(c(1,0,2^0.5,0,2,0,2^0.5,0,0),ncol=3)
eigen(a)
a<-matrix(c(2,1,-1,0,2,0,0,1,1),ncol=3)
a
eigen(a)
A<-(c(0,1,0,-1,0,1,0,-1,1),ncol=3)
A<-matrix(c(0,1,0,-1,0,1,0,-1,1),ncol=3)
A
solve(A)
`diag<-(c(2,2,1))
diag<-(c(2,2,1))
////
2.''
fe'f'
e;'[\e[;mj'
diag<-(c(2,2,1))
d<-diag(c(2,2,1))
d
A%*%d
A%*%d%*%solve(A)
library(ggplot2movies)
ratings <- movies[ , 7:16]
popular <- apply(ratings, 1, FUN = function(x) which.max(x)  )
which.max(ratings[1])
which.max(movies[1,7:16])
which.max(movies[1,7:16])
a=which.max(movies[1,7:16])
type(a)
typeof(a)
class(a)
a=which.max(movies[4,7:16])
class(a)
movies[4,7:16]
a=which.max(movies[5,7:16])
a
movies[5,7:16]
a=which.max(movies[6,7:16])
a
movies[6,7:16]
ratings <- movies[ , 7:16]
## exercise
library(ggplot2movies)
data(movies, package = "ggplot2movies")
ratings <- movies[ , 7:16]
typeof(ratings)
typeof(ratings$r1)
ratings
ratings[1,]
ratings[,1]
ratings[2
,]
ratings[3,]
ratings <- movies[ , 7:16]
ratings <- movies[ , 7:16]
popular <- apply(ratings, 1, FUN = function(x) which.max(x)  )
plot(table(popular), xlab="Rating", ylab="Counts", main="The most popular rating")
popular
table(result)
#str(movies)
getmaxrate<-function(x){# input score return max score name
#a=x[7:16]==max(x[7:16])
a=x==max(x)
names(x)[a]
}
# do by apply function
result=apply(X = movies[,7:16], MARGIN = 1, FUN = function(x) getmaxrate(x))
result<-unlist(result)
table(result)
plot(result)
result
plot(table(result))
#plot
result_factor<-factor(result,levels = c("r1","r2","r3","r4","r5","r6","r7","r8","r9","r10"))
plot(result_factor)
plot(table(result))
plot(table(popular), xlab="Rating", ylab="Counts", main="The most popular rating")
#str(movies)
getmaxrate<-function(x){# input score return max score name
#a=x[7:16]==max(x[7:16])
a=x==max(x)
names(x)[a]
return(x[1])
}
# do by apply function
result=apply(X = movies[,7:16], MARGIN = 1, FUN = function(x) getmaxrate(x))
result<-unlist(result)
table(result)
#str(movies)
getmaxrate<-function(x){# input score return max score name
#a=x[7:16]==max(x[7:16])
a=x==max(x)
names(x)[a]
return(names(x)[a][1])
}
# do by apply function
result=apply(X = movies[,7:16], MARGIN = 1, FUN = function(x) getmaxrate(x))
result<-unlist(result)
table(result)
#plot
result_factor<-factor(result,levels = c("r1","r2","r3","r4","r5","r6","r7","r8","r9","r10"))
plot(result_factor)
plot(table(popular), xlab="Rating", ylab="Counts", main="The most popular rating")
table(result)
tresult<-table(result)
table.ind<-c("r1","r2","r3","r4","r5","r6","r7","r8","r9","r10")
tresult[table.ind]
result_factor
table(result_factor)
tresult[table.ind]
#plot
result_factor<-factor(result,levels = c("1","2","3","4","5","6","7","8","9","10"))
table(result_factor)
#plot
levels<-list(1="r1")
#plot
levels<-list("1"="r1")
#plot
levels<-list("1"="r1","2"="r2","3"="r3","4"="r4","5"="r5","6"="r6","7"="r7","8"="r8","9"="r9","10"="r10")
result_factor<-factor(result_factor,levels = levels)
plot(result_factor)
table(result_factor)
#plot
levels<-list("1"="r1","2"="r2","3"="r3","4"="r4","5"="r5","6"="r6","7"="r7","8"="r8","9"="r9","10"="r10")
table(result_factor)
result_factor<-factor(result,levels = c("r1","r2","r3","r4","r5","r6","r7","r8","r9","r10"))
plot(result_factor)
levels(result_factor)
table(result_factor)
#plot
result_factor<-factor(result,levels = c("r1","r2","r3","r4","r5","r6","r7","r8","r9","r10"))
levels(result_factor)<-list("1"="r1","2"="r2","3"="r3","4"="r4","5"="r5","6"="r6","7"="r7","8"="r8","9"="r9","10"="r10")
levels(result_factor)
table(result_factor)
levels(result_factor)<-c(1,2,3,4,5,6,7,8,9,10)
#plot
result_factor<-factor(result,levels = c("r1","r2","r3","r4","r5","r6","r7","r8","r9","r10"))
table(result_factor)
levels(result_factor)<-c(1,2,3,4,5,6,7,8,9,10)
table(result_factor)
plot(result_factor)
plot(table(result))
table(result_factor)
plot(table(result))
setwd("D:/OneDrive/資料們/成大/110-1/課程投影片/線性代數/程式作業/作業四")
pokemon<-read.csv("pokemon.csv")
isleg<-subset(x=pokemon,subset = Legendary==TRUE)
notleg<-subset(x=pokemon,subset = Legendary==FALSE)
